diff --git a/NasLib/hal/hal.h b/NasLib/hal/hal.h
index 0da27a2cc63..c1f93d36299 100755
--- a/NasLib/hal/hal.h
+++ b/NasLib/hal/hal.h
@@ -3317,7 +3317,8 @@ typedef enum _NVME_DATA_TEMPLATE
     TEMPLATE_NVME_SMART_LOG                                 = 2,
     TEMPLATE_NVME_ERR_LOG                                   = 3,
     TEMPLATE_NVME_SELF_TEST                                 = 4,
-    TEMPLATE_NVME_MAX_ITEMS                                 = 5,
+    TEMPLATE_RAID_INFO                                      = 5,
+    TEMPLATE_NVME_MAX_ITEMS                                 = 6,
 } NVME_DATA_TEMPLATE;
 
 
diff --git a/NasLib/hal/hal_da_util.h b/NasLib/hal/hal_da_util.h
new file mode 100644
index 00000000000..4c2dbfdaa40
--- /dev/null
+++ b/NasLib/hal/hal_da_util.h
@@ -0,0 +1,6 @@
+
+
+struct da_temp_info {
+    int len;
+    int temp_num;
+};
diff --git a/NasLib/hal/hal_sys_pd.c b/NasLib/hal/hal_sys_pd.c
index ee592b3636d..f44a81082f2 100755
--- a/NasLib/hal/hal_sys_pd.c
+++ b/NasLib/hal/hal_sys_pd.c
@@ -37,6 +37,7 @@
 #include "hal_sys_scsi.h"
 #include "hal_sys_raidapi.h"
 #include "hal_enc.h"
+#include "hal_da_util.h"
 
 typedef struct _NVME_PASSTHRU_CMD
 {
@@ -14599,6 +14600,86 @@ int hash_string_by_sha256sum(IN char *string, OUT char *result, IN int result_le
     return 0;
 }
 
+void da_dump_data_to_file(FILE *nvme_out_file, struct da_temp_info datainfo, char *raw_data)
+{
+    int i;    
+    for (i = 0; i < datainfo.len; i++)
+        fputc(raw_data[i], nvme_out_file);
+
+}
+
+void append_data_to_header(char *disk_data_tmpfile, char *nvme_tmpfile, int disk_data_offset)
+{
+    char cmd[256] = {0};
+    sprintf(cmd, "dd if=%s of=%s seek=%d bs=1", nvme_tmpfile, disk_data_tmpfile, disk_data_offset);
+    system(cmd);
+}
+
+int da_util_read_file(char *file, char *blob)
+{
+    int ret;
+    int fd = open(file, O_RDONLY, 0644);
+    ret = read(fd, blob, 512);
+    close(fd);
+    return ret;
+}
+
+void da_util_cmd_getoutput(char *cmd, char *buf, int len)
+{
+    FILE *fr;
+    fr = popen(cmd, "r");
+
+    fgets(buf, len, fr);
+    return;
+    
+}
+
+void da_util_str_split(char *buf, char delim, char *str1, char *str2)
+{
+    int i;
+    for(i = 0 ; buf[i] != '\0'; i++)
+    {
+        if(buf[i] == delim)
+            break;
+    }
+    sprintf(str1, "%.*s", i, buf);
+    sprintf(str2, "%s", buf + i + 1);
+    return;
+}
+
+void da_util_str_strip(char *str)
+{
+    int i;
+    for(i = 0 ; str[i] != '\0'; i++)
+    {
+        if(str[i] == '\n')
+            break;
+    }
+    str[i] = '\0';
+    return;
+}
+
+
+int da_util_get_raid_info(int enc_id, int port_id, char *blob)
+{
+    char status[4] = {0};
+    char path[64] = {0};
+    char buf[64];
+    char cmd[64] = {0};
+
+    sprintf(cmd, "/sbin/da_util --system_raid_info enc_id=%d,port_id=%d", enc_id, port_id);
+    da_util_cmd_getoutput(cmd, buf, 64);
+    da_util_str_split(buf, ',', status, path);
+    if(atoi(status) != 0)
+    {
+        ERR_TRACE(TRACE_ERROR, "HAL fail to get raid info enc_id=%d,port_id=%d --> %s, %s\n", enc_id, port_id, status, path);
+        return -1;
+    }
+    da_util_str_strip(path);
+    da_util_read_file(path, blob);
+    return 0;
+}
+
 int pd_sys_get_data_package(IN char *enc_sys_id, IN char *pd_sys_id, IN int enc_id, IN int port_id)
 {
     struct ata_smart_attribute *attribute_entry;
@@ -14646,31 +14727,61 @@ int pd_sys_get_data_package(IN char *enc_sys_id, IN char *pd_sys_id, IN int enc_
         system(cmd);
     }
     else if (!strncmp(pd_sys_id, "nvme", 4)) {
+        
+        // 1. gen_data_file, get length
+        
+        FILE *nvme_out_file = NULL;
+        char nvme_tmpfile[128] = {0};
+        struct da_temp_info datainfo[TEMPLATE_NVME_MAX_ITEMS];
+        char blob[512] = {0};
+
+        memset(datainfo, 0, sizeof(struct da_temp_info) * TEMPLATE_NVME_MAX_ITEMS);
+
+        sprintf(nvme_tmpfile, "/tmp/nvme_info_%d_%d" ,enc_id, port_id);
+        nvme_out_file = fopen(nvme_tmpfile, "w");
+
         if (pd_sys_get_nvme_ident(enc_sys_id, pd_sys_id, &nvme_id_ctrl) == 0) {
-            template_bitmap |= (1 << TEMPLATE_NVME_IDENTIFY_CTRL);
+            datainfo[0].len = 4096;
+            datainfo[0].temp_num = 101 + TEMPLATE_NVME_IDENTIFY_CTRL;
+            da_dump_data_to_file(nvme_out_file, datainfo[0], &nvme_id_ctrl);
         }
 
         if (pd_sys_get_nvme_ident_namespace(enc_sys_id, pd_sys_id, &nvme_id_ns) == 0) {
-            template_bitmap |= (1 << TEMPLATE_NVME_IDENTIFY_NAMESPACE);
+            datainfo[1].len = 4096;
+            datainfo[1].temp_num = 101 + TEMPLATE_NVME_IDENTIFY_NAMESPACE;
+            da_dump_data_to_file(nvme_out_file, datainfo[1], &nvme_id_ns);
         }
 
         if (pd_sys_get_nvme_smart(enc_sys_id, pd_sys_id, &nvme_smart) == 0) {
-            template_bitmap |= (1 << TEMPLATE_NVME_SMART_LOG);
+            datainfo[2].len = 512;
+            datainfo[2].temp_num = 101 + TEMPLATE_NVME_SMART_LOG;
+            da_dump_data_to_file(nvme_out_file, datainfo[2], &nvme_smart);
         }
 
-        if (template_bitmap & (1 << TEMPLATE_NVME_IDENTIFY_CTRL)) {
-            nvme_data_template_resp_size[TEMPLATE_NVME_ERR_LOG] = (nvme_id_ctrl.elpe + 1) * sizeof(PD_NVME_ERROR_LOG_PAGE);
-            nvme_err_log = calloc(nvme_data_template_resp_size[TEMPLATE_NVME_ERR_LOG], sizeof(PD_NVME_ERROR_LOG_PAGE));
+        if (datainfo[0].len > 0) {
+            datainfo[3].len = (nvme_id_ctrl.elpe + 1) * sizeof(PD_NVME_ERROR_LOG_PAGE);
+            nvme_err_log = calloc(datainfo[3].len, sizeof(char));
             if (pd_sys_get_nvme_all_errlogs(pd_sys_id, nvme_id_ctrl.elpe + 1, nvme_err_log) == 0) {
-                template_bitmap |= (1 << TEMPLATE_NVME_ERR_LOG);
+                datainfo[3].temp_num = 101 + TEMPLATE_NVME_ERR_LOG;
+                da_dump_data_to_file(nvme_out_file, datainfo[3], nvme_err_log);
+                free(nvme_err_log);
             }
         }
 
         if (pd_sys_get_nvme_selftest_logs(pd_sys_id, &nvme_self_test_log) == 0) {
-            template_bitmap |= (1 << TEMPLATE_NVME_SELF_TEST);
+            datainfo[4].len = 560;
+            datainfo[4].temp_num = 101 + TEMPLATE_NVME_SELF_TEST;
+            da_dump_data_to_file(nvme_out_file, datainfo[4], &nvme_self_test_log.result);
         }
 
+        if (da_util_get_raid_info(enc_id, port_id, blob) == 0) {
+            datainfo[5].len = 512;
+            datainfo[5].temp_num = 203;
+            da_dump_data_to_file(nvme_out_file, datainfo[5], blob);
+        }
+        fclose(nvme_out_file);
 
+        // 2. generate header
         snprintf(disk_data_tmpfile, sizeof(disk_data_tmpfile), DISK_DATA_PATH, enc_id, port_id);
         pOutput_File = fopen(disk_data_tmpfile, "w");
 
@@ -14844,14 +14955,24 @@ int pd_sys_get_data_package(IN char *enc_sys_id, IN char *pd_sys_id, IN int enc_
         fprintf(pOutput_File, "Attribute: Regular\n");
 
         disk_data_offset = DISK_DATA_PACKAGE_HEADER_SIZE;
+
+        count = 0;
+        for(index = 0 ; index < TEMPLATE_NVME_MAX_ITEMS ; index++)
+        {
+            if(datainfo[index].len <= 0)
+                continue;
+            count += 1;
+        }
+        fprintf(pOutput_File, "No. of Records: %d\n", count);
+
         count = 1;
         for (index = TEMPLATE_NVME_IDENTIFY_CTRL; index < TEMPLATE_NVME_MAX_ITEMS; index++) {
-            if (!(template_bitmap & (0x01 << index)))
+            if(datainfo[index].len <= 0)
                 continue;
             fprintf(pOutput_File, "Record %d byte index: %d\n", count, disk_data_offset);
-            fprintf(pOutput_File, "Record %d length: %d\n", count, nvme_data_template_resp_size[index]);
-            fprintf(pOutput_File, "Record %d template: %03d\n", count, 101 + index);
-            disk_data_offset += nvme_data_template_resp_size[index];
+            fprintf(pOutput_File, "Record %d length: %d\n", count, datainfo[index].len);
+            fprintf(pOutput_File, "Record %d template: %03d\n", count, datainfo[index].temp_num);
+            disk_data_offset += datainfo[index].len;
             count++;
         }
 
@@ -14859,54 +14980,11 @@ int pd_sys_get_data_package(IN char *enc_sys_id, IN char *pd_sys_id, IN int enc_
         /* Here's the end of the meaningful data header. */
 
         fseek(pOutput_File, DISK_DATA_PACKAGE_HEADER_SIZE, SEEK_SET);
-        disk_data_offset = DISK_DATA_PACKAGE_HEADER_SIZE;
-        for (index = TEMPLATE_NVME_IDENTIFY_CTRL; index < TEMPLATE_NVME_MAX_ITEMS; index++) {
-            if (!(template_bitmap & (0x1 << index)))
-                continue;
-            switch (index) {
-            case TEMPLATE_NVME_IDENTIFY_CTRL:
-                raw_data = &nvme_id_ctrl;
-                for (resp_index = 0; resp_index < 4096; resp_index++)
-                    fputc(raw_data[resp_index], pOutput_File);
-                disk_data_offset += nvme_data_template_resp_size[TEMPLATE_NVME_IDENTIFY_CTRL];
-                fseek(pOutput_File, disk_data_offset, SEEK_SET);
-                break;
-            case TEMPLATE_NVME_IDENTIFY_NAMESPACE:
-                raw_data = &nvme_id_ns;
-                for (resp_index = 0; resp_index < 4096; resp_index++)
-                    fputc(raw_data[resp_index], pOutput_File);
-                disk_data_offset += nvme_data_template_resp_size[TEMPLATE_NVME_IDENTIFY_NAMESPACE];;
-                fseek(pOutput_File, disk_data_offset, SEEK_SET);
-                break;
-            case TEMPLATE_NVME_SMART_LOG:
-                raw_data = &nvme_smart;
-                for (resp_index = 0; resp_index < 512; resp_index++)
-                    fputc(raw_data[resp_index], pOutput_File);
-                disk_data_offset += nvme_data_template_resp_size[TEMPLATE_NVME_SMART_LOG];
-                fseek(pOutput_File, disk_data_offset, SEEK_SET);
-                break;
-            case TEMPLATE_NVME_ERR_LOG:
-                raw_data = nvme_err_log;
-                for (resp_index = 0; resp_index < nvme_data_template_resp_size[TEMPLATE_NVME_ERR_LOG]; resp_index++)
-                    fputc(raw_data[resp_index], pOutput_File);
-                disk_data_offset += nvme_data_template_resp_size[TEMPLATE_NVME_ERR_LOG];
-                fseek(pOutput_File, disk_data_offset, SEEK_SET);
-                free(nvme_err_log);
-                break;
-            case TEMPLATE_NVME_SELF_TEST:
-                raw_data = &nvme_self_test_log.result;
-                for (resp_index = 0; resp_index < nvme_data_template_resp_size[TEMPLATE_NVME_SELF_TEST]; resp_index++)
-                    fputc(raw_data[resp_index], pOutput_File);
-                disk_data_offset += nvme_data_template_resp_size[TEMPLATE_NVME_SELF_TEST];
-                fseek(pOutput_File, disk_data_offset, SEEK_SET);
-                break;
-
-            default:
-                break;
-            }
-        }
         fclose(pOutput_File);
 
+        // append data into header file
+        append_data_to_header(disk_data_tmpfile, nvme_tmpfile, DISK_DATA_PACKAGE_HEADER_SIZE);
+
     } else {
         snprintf(pd_ctrl_name, MAX_PD_CTRL_NAME, "/dev/%s", pd_sys_id);
 
@@ -15335,8 +15413,92 @@ int pd_sys_get_data_package(IN char *enc_sys_id, IN char *pd_sys_id, IN int enc_
                 }
             }
 
-            // All sata drives should support template 016/ 201/ 203
-            record_count += 3;
+            // New flow start
+            int ret;
+            int da_i;
+            int sata_max_template_num = 4;
+            FILE *sata_out_file = NULL;
+            char sata_tmpfile[128] = {0};
+            struct da_temp_info datainfo[4];
+            char blob[512] = {0};
+
+            memset(datainfo, 0, sizeof(struct da_temp_info) * sata_max_template_num);
+
+            sprintf(sata_tmpfile, "/tmp/sata_info_%d_Ed" ,enc_id, port_id);
+            sata_out_file = fopen(sata_tmpfile, "w");
+            
+            for(da_i = 0 ; da_i < sata_max_template_num ; da_i++)
+            {
+                if(da_i == 0)
+                {
+                    memset(blob, 0x0, sizeof(blob));
+                    
+                    ret = pd_sys_get_disk_statistic_data(DISK_DATA_TEMPLATE_SATA_INTERFACE_STATISTICS + 1, pd_info.serial_no, blob);
+                    if(ret == 0)
+                    {
+                        datainfo[da_i].len = 512;
+                        datainfo[da_i].temp_num = 16;
+                        da_dump_data_to_file(sata_out_file, datainfo[da_i], blob);
+                    }
+                    else
+                    {
+                        ERR_TRACE(TRACE_INFO, "%s : fail to get data of template 16 : %d\n", __func__, ret);
+                    }
+                }
+                else if(da_i == 1)
+                {
+                    memset(blob, 0x0, sizeof(blob));
+                    
+                    ret = pd_sys_get_disk_statistic_data(201, pd_info.serial_no, blob);
+                    if(ret == 0)
+                    {
+                        datainfo[da_i].len = 512;
+                        datainfo[da_i].temp_num = 201;
+                        da_dump_data_to_file(sata_out_file, datainfo[da_i], blob);
+                    }
+                    else
+                    {
+                        ERR_TRACE(TRACE_INFO, "%s : fail to get data of template 201 : %d\n", __func__, ret);
+                    }
+                }
+                else if(da_i == 2)
+                {
+                    memset(blob, 0x0, sizeof(blob));
+                    
+                    ret = pd_sys_get_disk_statistic_data(202, pd_info.serial_no, blob);
+                    if(ret == 0)
+                    {
+                        datainfo[da_i].len = 512;
+                        datainfo[da_i].temp_num = 202;
+                        da_dump_data_to_file(sata_out_file, datainfo[da_i], blob);
+                    }
+                    else
+                    {
+                        ERR_TRACE(TRACE_INFO, "%s : fail to get data of template 202 : %d\n", __func__, ret);
+                    }
+                }
+
+                else if(da_i == 3)
+                {
+                    memset(blob, 0x0, sizeof(blob));
+                    if (da_util_get_raid_info(enc_id, port_id, blob) == 0) {
+                        datainfo[da_i].len = 512;
+                        datainfo[da_i].temp_num = 203;
+                        da_dump_data_to_file(sata_out_file, datainfo[da_i], blob);
+                    }
+                }
+            }
+            fclose(sata_out_file);
+
+            for(da_i = 0 ; da_i < sata_max_template_num ; da_i++)
+            {
+                if(datainfo[da_i].len > 0)
+                {
+                    record_count += 1;
+                }
+            }
+
+            // New flow end
 
             fprintf(pOutput_File, "No. of Records: %d\n", record_count);
 
@@ -15456,32 +15618,20 @@ int pd_sys_get_data_package(IN char *enc_sys_id, IN char *pd_sys_id, IN int enc_
                 template_bitmap |= (1 << DISK_DATA_TEMPLATE_EXTENDED_SMART_SELF_TEST_LOG);
             }
 
-            // Template 016
-            count++;
-            fprintf(pOutput_File, "Record %d byte index: %d\n", count, disk_data_offset);
-            fprintf(pOutput_File, "Record %d length: %d\n", count, disk_data_template_default_resp_size);
-            fprintf(pOutput_File, "Record %d template: %03d\n", count, DISK_DATA_TEMPLATE_SATA_INTERFACE_STATISTICS + 1);
-            disk_data_offset += disk_data_template_default_resp_size;
-            template_bitmap |= (1 << DISK_DATA_TEMPLATE_SATA_INTERFACE_STATISTICS);
-
-            // Template 201, please be awaer that the Template ID is 201, not (DISK_DATA_TEMPLATE_HOST_DRIVER_STATISTICS + 1)
-            count++;
-            fprintf(pOutput_File, "Record %d byte index: %d\n", count, disk_data_offset);
-            fprintf(pOutput_File, "Record %d length: %d\n", count, disk_data_template_default_resp_size);
-            fprintf(pOutput_File, "Record %d template: %03d\n", count, DISK_DATA_TEMPLATE_ID_HOST_DRIVER_STATISTICS);
-            disk_data_offset += disk_data_template_default_resp_size;
-            template_bitmap |= (1 << DISK_DATA_TEMPLATE_HOST_DRIVER_STATISTICS);
-
-            // Template 202, please be awaer that the Template ID is 202, not (DISK_DATA_TEMPLATE_DRIVER_FAILURE_LOG + 1)
-            count++;
-            fprintf(pOutput_File, "Record %d byte index: %d\n", count, disk_data_offset);
-            fprintf(pOutput_File, "Record %d length: %d\n", count, disk_data_template_default_resp_size);
-            fprintf(pOutput_File, "Record %d template: %03d\n", count, DISK_DATA_TEMPLATE_ID_DRIVER_FAILURE_LOG);
-            disk_data_offset += disk_data_template_default_resp_size;
-            template_bitmap |= (1 << DISK_DATA_TEMPLATE_DRIVER_FAILURE_LOG);
-
             ERR_TRACE(TRACE_INFO, "%s: template_bitmap 0x%x\n", __func__, template_bitmap);
 
+            for(da_i = 0 ; da_i < sata_max_template_num ; da_i++)
+            {
+                if(datainfo[da_i].len > 0)
+                {
+                    count++;
+                    fprintf(pOutput_File, "Record %d byte index: %d\n", count, disk_data_offset);
+                    fprintf(pOutput_File, "Record %d length: %d\n", count, datainfo[da_i].len);
+                    fprintf(pOutput_File, "Record %d template: %03d\n", count, datainfo[da_i].temp_num);
+                    disk_data_offset += disk_data_template_default_resp_size;
+                }
+            }
+
             fprintf(pOutput_File, "END");
             /* Here's the end of the meaningful data header. */
             
@@ -15938,33 +16088,6 @@ int pd_sys_get_data_package(IN char *enc_sys_id, IN char *pd_sys_id, IN int enc_
                         }
                         break;
 
-                    case DISK_DATA_TEMPLATE_SATA_INTERFACE_STATISTICS:
-                        memset(disk_resp, 0x0, sizeof(disk_resp));
-                        ret = pd_sys_get_disk_statistic_data(DISK_DATA_TEMPLATE_SATA_INTERFACE_STATISTICS + 1, tmp_buffer, disk_resp);
-                        for (resp_index = 0; resp_index < sizeof(disk_resp); resp_index++)
-                            fputc(disk_resp[resp_index], pOutput_File);
-                        disk_data_offset += disk_data_template_default_resp_size;
-                        fseek(pOutput_File, disk_data_offset, SEEK_SET);
-                        break;
-
-                    case DISK_DATA_TEMPLATE_HOST_DRIVER_STATISTICS:
-                        memset(disk_resp, 0x0, sizeof(disk_resp));
-                        ret = pd_sys_get_disk_statistic_data(DISK_DATA_TEMPLATE_ID_HOST_DRIVER_STATISTICS, tmp_buffer, disk_resp);
-                        for (resp_index = 0; resp_index < sizeof(disk_resp); resp_index++)
-                            fputc(disk_resp[resp_index], pOutput_File);
-                        disk_data_offset += disk_data_template_default_resp_size;
-                        fseek(pOutput_File, disk_data_offset, SEEK_SET);
-                        break;
-
-                    case DISK_DATA_TEMPLATE_DRIVER_FAILURE_LOG:
-                        memset(disk_resp, 0x0, sizeof(disk_resp));
-                        ret = pd_sys_get_disk_statistic_data(DISK_DATA_TEMPLATE_ID_DRIVER_FAILURE_LOG, tmp_buffer, disk_resp);
-                        for (resp_index = 0; resp_index < sizeof(disk_resp); resp_index++)
-                            fputc(disk_resp[resp_index], pOutput_File);
-                        disk_data_offset += disk_data_template_default_resp_size;
-                        fseek(pOutput_File, disk_data_offset, SEEK_SET);
-                        break;
-
                     default:
                         break;
                 }
@@ -15972,6 +16095,9 @@ int pd_sys_get_data_package(IN char *enc_sys_id, IN char *pd_sys_id, IN int enc_
 
             if (pOutput_File)
                 fclose(pOutput_File);
+
+            // append data into header file
+            append_data_to_header(disk_data_tmpfile, sata_tmpfile, disk_data_offset);
         }
     }
     return count;
diff --git a/NasUtil/da_util/Makefile b/NasUtil/da_util/Makefile
index 45e6170a28d..b99180b044a 100644
--- a/NasUtil/da_util/Makefile
+++ b/NasUtil/da_util/Makefile
@@ -1,5 +1,5 @@
 
-INCLUDES = -I$(NAS_LIB_PATH)/include -I$(NAS_LIB_PATH)/uLinux -I$(NAS_LIB_PATH)/hal
+INCLUDES = -I$(NAS_LIB_PATH)/include -I$(NAS_LIB_PATH)/storage_man_v2 -I$(NAS_LIB_PATH)/uLinux -I$(NAS_LIB_PATH)/hal
 
 LIBS = -L${ROOT_PATH}/usr/lib -L${TARGET_PREFIX}/usr/lib -L${TARGET_PREFIX}/lib -luLinux_Storage -luLinux_hal -luLinux_ini
 
diff --git a/NasUtil/da_util/da_sas.c b/NasUtil/da_util/da_sas.c
index a19577b5236..b30e240834a 100644
--- a/NasUtil/da_util/da_sas.c
+++ b/NasUtil/da_util/da_sas.c
@@ -7,7 +7,7 @@ void dump_datainfo(struct datainfo *dinfo)
 {
     int i;
     int total = 0;
-    for(i = 0 ; i < SAS_FUNC_NUM ; i++)
+    for(i = 0 ; i < SAS_FUNC_NUM + NAS_FUNC_NUM ; i++)
     {
         printf("(template, op, length) = (%d, %02x, %d)\n", dinfo[i].temp_num, dinfo[i].op, dinfo[i].len);
         total += dinfo[i].len;
@@ -15,9 +15,9 @@ void dump_datainfo(struct datainfo *dinfo)
     printf("(total) = %d\n", total);
 }
 
-void dump_buf_to_file(int fd, char *buf, int blen)
+int dump_buf_to_file(int fd, char *buf, int blen)
 {
-    write(fd, buf, blen);
+    return write(fd, buf, blen);
 }
 
 void dump_log_page_buffer(char *buf)
@@ -560,7 +560,6 @@ void browse_all_funcs(int sg_fd, struct datainfo *dinfo, int data_fd)
         dinfo[i].op = funcs[i].opcode;
         dinfo[i].len = funcs[i].func(sg_fd, funcs[i].opcode, data_fd);
     }
-    dump_datainfo(dinfo);
 }
 
 void da_gen_sas_data_file(char *dev, int enc_id, int port_id, struct datainfo *dinfo, char *sas_path)
@@ -572,14 +571,13 @@ void da_gen_sas_data_file(char *dev, int enc_id, int port_id, struct datainfo *d
         perror("error opening given file name");
         return;
     }
-    sprintf(sas_path,  "/tmp/smart/disk_sas_data_%d_%d", enc_id, port_id);
+    sprintf(sas_path,  "/tmp/disk_sas_data_%d_%d", enc_id, port_id);
 
     if(access( sas_path, F_OK ) != -1)
     {
         unlink(sas_path);
     }
     data_fd = open(sas_path, O_CREAT | O_WRONLY, 0644);
-    memset(dinfo, 0, sizeof(struct datainfo) * SAS_FUNC_NUM);
 
     get_sup_pages(sg_fd);
     get_sup_vpds(sg_fd);
@@ -589,6 +587,62 @@ void da_gen_sas_data_file(char *dev, int enc_id, int port_id, struct datainfo *d
     close(sg_fd);
 }
 
+
+extern int _da_system_raid_info(int enc_id, int port_id, char *blob);
+
+int read_raid_info(unsigned char op, struct nas_paras *paras)
+{
+    int ret;
+    int len;
+    
+    char blob[ULINK_TEMPLATE_SIZE] = {0};
+    
+    len = _da_system_raid_info(paras->enc_id, paras->port_id, blob);
+    if(len < 0)
+    {
+        fprintf(stderr, "%s(%d) Fail to get raid info (%d, %d)\n", __func__, __LINE__, paras->enc_id, paras->port_id);
+        return -1;
+    }
+    ret = dump_buf_to_file(paras->data_fd, blob, ULINK_TEMPLATE_SIZE);
+    if (ret == -1)
+    {
+        fprintf(stderr, "Fail to dump buffer (%d, %d)\n", paras->enc_id, paras->port_id);
+        perror("");
+        return -1;
+    }
+    return len;
+}
+
+void da_gen_nas_data_file(int enc_id, int port_id, struct datainfo *dinfo, char *nas_path, int offset)
+{
+    int i, j, data_fd;
+    struct nas_paras paras;
+
+    sprintf(nas_path,  "/tmp/disk_nas_data_%d_%d", enc_id, port_id);
+
+    if(access( nas_path, F_OK ) != -1)
+    {
+        unlink(nas_path);
+    }
+    data_fd = open(nas_path, O_CREAT | O_WRONLY, 0644);
+    if(data_fd < 0)
+    {
+        perror("Can not open nas_path\n");
+    }
+    paras.enc_id = enc_id;
+    paras.port_id = port_id;
+    paras.data_fd = data_fd;
+
+    for(i = 0 ; i < NAS_FUNC_NUM ; i++)
+    {
+        j = offset + i;
+        dinfo[j].temp_num = nasfuncs[i].temp_num;
+        dinfo[j].op = nasfuncs[i].opcode;
+        dinfo[j].len = nasfuncs[i].func(nasfuncs[i].opcode, &paras);
+    }
+    close(data_fd);
+}
+
 void da_gen_sas_header(struct datainfo *dinfo, int enc_id, int port_id, char *disk_data_tmpfile)
 {
     int i, cnt, disk_data_offset;
@@ -787,7 +841,7 @@ void da_gen_sas_header(struct datainfo *dinfo, int enc_id, int port_id, char *di
 
     cnt = 1;
     disk_data_offset = DISK_SAS_DATA_PACKAGE_HEADER_SIZE;
-    for(i = 0 ; i < SAS_FUNC_NUM ; i++)
+    for(i = 0 ; i < SAS_FUNC_NUM + NAS_FUNC_NUM ; i++)
     {
         if(dinfo[i].len <= 0)
         {
@@ -803,31 +857,44 @@ void da_gen_sas_header(struct datainfo *dinfo, int enc_id, int port_id, char *di
     fclose(pOutput_File);
 }
 
-void combine_head_data(char *hpath, char *spath)
+void copy_file_byfd(int fd, char *spath)
 {
-    int hfd, sfd;
     int cnt = 0;
     char buf[8192];
 
-    printf("head file:%s, data file:%s\n", hpath, spath);
-    hfd = open(hpath, O_CREAT | O_WRONLY, 0644);
-    sfd = open(spath, O_RDONLY, 0644);
-    lseek(hfd, DISK_SAS_DATA_PACKAGE_HEADER_SIZE, SEEK_CUR);
+    int sfd = open(spath, O_RDONLY, 0644);
     cnt = read(sfd, buf, 8192);
     while(cnt > 0)
     {
-        write(hfd, buf, cnt);
+        write(fd, buf, cnt);
         cnt = read(sfd, buf, 8192);
     }
-    close(hfd);
     close(sfd);
 }
 
+void combine_head_data(char *hpath, char *spath, char *tpath)
+{
+    int hfd, sfd, tfd;
+    int i; 
+    char *arr[2] = {spath, tpath};
+
+    printf("head file:%s, data file:%s, %s\n", hpath, arr[0], arr[1]);
+    hfd = open(hpath, O_CREAT | O_WRONLY, 0644);
+    lseek(hfd, DISK_SAS_DATA_PACKAGE_HEADER_SIZE, SEEK_CUR);
+
+    for(i = 0 ; i < 2 ; i++)
+    {
+       copy_file_byfd(hfd, arr[i]); 
+    }
+    close(hfd);
+}
+
 int da_sas(struct paras_in paras)
 {
     PD_INFO pd_info;
-    struct datainfo dinfo[SAS_FUNC_NUM];
+    struct datainfo dinfo[SAS_FUNC_NUM + NAS_FUNC_NUM];
     char sas_path[256] = {0};
+    char nas_path[256] = {0};
     char head_path[256] = {0};
 
     if (PD_Get_Info(paras.enc_id, paras.port_id, &pd_info) < 0)
@@ -837,9 +904,14 @@ int da_sas(struct paras_in paras)
     }
 
     printf("(%s : %s)\n", pd_info.pd_sys_name, pd_info.serial_no); 
+    memset(dinfo, 0, sizeof(struct datainfo) * SAS_FUNC_NUM);
+
     da_gen_sas_data_file(pd_info.pd_sys_name, paras.enc_id, paras.port_id, dinfo, sas_path);
+    da_gen_nas_data_file(paras.enc_id, paras.port_id, dinfo, nas_path, SAS_FUNC_NUM);
     da_gen_sas_header(dinfo, paras.enc_id, paras.port_id, head_path);
-    combine_head_data(head_path, sas_path);
+    dump_datainfo(dinfo);
+
+    combine_head_data(head_path, sas_path, nas_path);
     return 0;
     
 }
diff --git a/NasUtil/da_util/da_sas.h b/NasUtil/da_util/da_sas.h
index f6359d14249..fca0041f2e8 100644
--- a/NasUtil/da_util/da_sas.h
+++ b/NasUtil/da_util/da_sas.h
@@ -1,9 +1,3 @@
-#include <stdlib.h>
-#include <unistd.h>
-#include <fcntl.h>
-#include <stdio.h>
-#include <string.h>
-#include <errno.h>
 #include <sys/ioctl.h>
 #include <scsi/sg.h> /* take care: fetches glibc's /usr/include/scsi/sg.h */
 
@@ -85,6 +79,7 @@ int send_inquiry_vpd_command(int sg_fd, unsigned char op, int data_fd);
 int send_read_capacity_10(int sg_fd, unsigned char op, int data_fd);
 int send_read_capacity_16(int sg_fd, unsigned char op, int data_fd);
 int send_read_defect_data_12(int sg_fd, unsigned char op, int data_fd);
+int send_read_defect_data_12(int sg_fd, unsigned char op, int data_fd);
 
 #define SAS_FUNC_NUM 28
 
@@ -118,6 +113,29 @@ struct sasfunc funcs[SAS_FUNC_NUM] = {
     {READ_DEFECT_DATA_12_GLIST, 332, send_read_defect_data_12},
     {READ_DEFECT_DATA_12_PLIST, 333, send_read_defect_data_12},
 };
+
+struct nas_paras {
+    int enc_id;
+    int port_id;
+    int data_fd;
+};
+
+struct nasfunc {
+    unsigned char opcode;
+    int temp_num;
+    int (*func)(unsigned char op, struct nas_paras *paras); 
+};
+
+#define NAS_RAID_INFO 203
+#define NAS_FUNC_NUM 1
+
+int read_raid_info(unsigned char op, struct nas_paras *paras);
+
+struct nasfunc nasfuncs[NAS_FUNC_NUM] = {
+    {NAS_RAID_INFO, 203, read_raid_info},
+};
+
+
 int len_sup_pages = 0;
 unsigned char *sup_pages;
 
diff --git a/NasUtil/da_util/da_system.c b/NasUtil/da_util/da_system.c
index f757cea28e5..a17fba5cb7b 100644
--- a/NasUtil/da_util/da_system.c
+++ b/NasUtil/da_util/da_system.c
@@ -1,5 +1,128 @@
 #include "da_util.h"
+#include "storage_man.h"
 
+/*
+int test_get_raid_info(int enc_id, int port_id, Storage_Raid_Info *raid_info)
+{
+    raid_info->group_id = 1;
+    raid_info->type = 1;
+    raid_info->capacity = 100;
+    raid_info->status = 0;
+    return 0;
+}
+*/
+
+void write_data_to_buffer(char *blob, void *value, int size, int *offset)
+{
+    int i = *offset;
+    if(size == 8)
+    {
+        unsigned long long *ivalue = (unsigned long long*)value;
+        blob[i] = (*ivalue) & 0xFF;
+        blob[i + 1] = (*ivalue >> 8) & 0xFF;
+        blob[i + 2] = (*ivalue >> 16) & 0xFF;
+        blob[i + 3] = (*ivalue >> 24) & 0xFF;
+        blob[i + 4] = (*ivalue >> 32) & 0xFF;
+        blob[i + 5] = (*ivalue >> 40) & 0xFF;
+        blob[i + 6] = (*ivalue >> 48) & 0xFF;
+        blob[i + 7] = (*ivalue >> 56) & 0xFF;
+    }
+    else if(size == 4)
+    {
+        unsigned int *ivalue = (unsigned int*)value;
+        blob[i] = (*ivalue) & 0xFF;
+        blob[i + 1] = (*ivalue >> 8) & 0xFF;
+        blob[i + 2] = (*ivalue >> 16) & 0xFF;
+        blob[i + 3] = (*ivalue >> 24) & 0xFF;
+    }
+    else if(size == 2)
+    {
+        unsigned short int *ivalue = (unsigned short int*)value;
+        blob[i] = (*ivalue) & 0xFF;
+        blob[i + 1] = (*ivalue >> 8) & 0xFF;
+    }
+
+    else if(size == 1)
+    {
+        unsigned char *ivalue = (unsigned char*)value;
+        blob[i] = (*ivalue) & 0xFF;
+    }
+    *offset += size;
+}
+
+int dump_buffer_to_file(char *fpath, char *blob)
+{
+     int ret;
+     int i;
+     int fd = open(fpath, O_CREAT | O_WRONLY, 0644);
+     ret = write(fd, blob, ULINK_TEMPLATE_SIZE);
+     close(fd);
+     return ret;
+}
+
+int raid_info_dump_to_buffer(RAID_DA_Template *raid_info, char *blob)
+{
+    int offset = 0;
+    int temp = 203, rev = 100, cnt = 4, size = 512;
+     
+    write_data_to_buffer(blob, &temp, 2, &offset);
+    write_data_to_buffer(blob, &rev, 2, &offset);
+    write_data_to_buffer(blob, &cnt, 2, &offset);
+    write_data_to_buffer(blob, &size, 2, &offset);
+    offset += 8;
+
+    write_data_to_buffer(blob, &(raid_info->group_id), 2, &offset);
+    write_data_to_buffer(blob, &(raid_info->type), 2, &offset);
+    write_data_to_buffer(blob, &(raid_info->capacity), 8, &offset);
+    write_data_to_buffer(blob, &(raid_info->status), 2, &offset);
+    
+    return 0;
+}
+
+int _da_system_raid_info(int enc_id, int port_id, char *blob)
+{
+    RAID_DA_Template raid_info;
+    int ret;
+
+    ret = NAS_RAID_Get_DA_Template(enc_id, port_id, &raid_info); 
+    if(ret != 0)
+    {
+        fprintf(stderr, "%s(%d) Fail to get raid info (%d, %d)\n", __func__, __LINE__, enc_id, port_id);
+        return -1;
+    }
+    ret = raid_info_dump_to_buffer(&raid_info, blob); 
+    if (ret != 0)
+    {
+        printf("Fail to dump data to buffer\n", enc_id, port_id);
+    }
+    
+    return ULINK_TEMPLATE_SIZE;
+    
+}
+
+int da_system_raid_info(struct paras_in paras)
+{
+    int ret;
+    char blob[ULINK_TEMPLATE_SIZE] = {0};
+    char fpath[128] = {0};
+    
+    ret =  _da_system_raid_info(paras.enc_id, paras.port_id, blob);
+    if(ret < 0)
+    {
+       printf("%d,Cannot get raid info\n", ret);
+       return ret;
+    }
+
+    sprintf(fpath, "/tmp/raid_info_%d_%d", paras.enc_id, paras.port_id);
+    ret = dump_buffer_to_file(fpath, blob);
+    if (ret == -1)
+    {
+        printf("999,Cannot dump raid info\n");
+        return 999;
+    }
+    printf("0,%s\n", fpath);
+    return 0;
+}
 
 int da_system_reset_cnt(struct paras_in paras)
 {
diff --git a/NasUtil/da_util/da_util.h b/NasUtil/da_util/da_util.h
index 985be1e649a..748098d0259 100644
--- a/NasUtil/da_util/da_util.h
+++ b/NasUtil/da_util/da_util.h
@@ -5,11 +5,14 @@
 #include <getopt.h>
 #include <dirent.h>
 #include <unistd.h>
+#include <fcntl.h>
+#include <errno.h>
 
 #include "hal.h"
 #include "hal_event.h"
 
-#define EINVAL 1
+
+#define ULINK_TEMPLATE_SIZE 512
 
 struct option *options;
 
@@ -34,17 +37,22 @@ static cmd_param param_ary[] =
 
 typedef int (*fobj) (struct paras_in);
 
+/*== start:function_declare_area  ==*/
 int da_iotest(struct paras_in);
 int da_sas(struct paras_in);
 int da_enable(struct paras_in);
 int da_enable_by_cfg(struct paras_in);
 int da_system_reset_cnt(struct paras_in);
+int da_system_raid_info(struct paras_in);
+
+/*== end:function_declare_area ==*/
 
 struct FuncStruct {
     char param[256];
     fobj func;
 };
 
+/*== start:function_para_area  ==*/
 static struct FuncStruct func_array[] = {
 
     {"iotest", da_iotest},
@@ -52,6 +60,9 @@ static struct FuncStruct func_array[] = {
     {"enable", da_enable},
     {"enable_by_cfg", da_enable_by_cfg},
     {"system_reset_cnt", da_system_reset_cnt},
+    {"system_raid_info", da_system_raid_info},
     {"", NULL},
 };
 
+/*== end:function_para_area ==*/
+
