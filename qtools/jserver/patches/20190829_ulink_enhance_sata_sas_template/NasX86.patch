diff --git a/NasLib/hal/hal_lib_sas.c b/NasLib/hal/hal_lib_sas.c
index 529cc9d5d9a..eedebfb5116 100644
--- a/NasLib/hal/hal_lib_sas.c
+++ b/NasLib/hal/hal_lib_sas.c
@@ -12,6 +12,7 @@
 
 #include "hal_lib_sas.h"
 
+
 unsigned short get_cmd_len(char *cmd_str)
 {
     return (strlen(cmd_str) + 1)/3;
@@ -152,6 +153,22 @@ int send_scsi_command(char *dev, char *cmd_str, void *data, void(*parsefunc)(uns
     return ret;
 }
 
+int send_scsi_command_with_buf(char *dev, char *cmd_str, unsigned char *buf, int buf_len)
+{
+    int ret = 0;
+    unsigned short int cmd_len;
+    unsigned char *cmd;
+
+    cmd_len = get_cmd_len(cmd_str);
+    cmd = malloc(cmd_len);
+    cmd_str_to_buf(cmd_str, cmd);
+
+    ret = _send_scsi_command(dev, cmd_len, cmd, buf_len, buf);
+    free(cmd);
+
+    return ret;
+}
+
 int is_sas_support_trim(char *dev)
 {
     int ret = 0;
@@ -209,7 +226,40 @@ int is_sas_support_trim_read_zero(char *dev)
     return 0;
 }
 
+int get_identify_device_data(char* dev, char *page, unsigned char *buf, int buf_len)
+{
+    char *base = "a1,08,0e,00,01,30,%s,00,00,2f,00,00";
+    char cmd[64] = {0};
+    sprintf(cmd, base, page);
+    return send_scsi_command_with_buf(dev, cmd, buf, buf_len);
+}
+
 #ifdef UNIT_TEST
+void test_get_identify_device_data(char *dev)
+{
+    int ret;
+    unsigned char buf[512] = {0};
+    char *pages[] = {"00", "02", "03", "04"};
+    int i;
+    for(i = 0 ; i < 4 ; i++)
+    {
+        printf("page: %s\n", pages[i]);
+        ret = get_identify_device_data(dev, pages[i], buf, 512);
+        if(ret != 0)
+        {
+            printf("ret : %d\n", ret);
+            return;
+        }
+        printf("\n");
+        int i;
+        for(i = 0 ; i < 512 ; i++)
+        {
+            printf("%02x ", buf[i]);
+        }
+        printf("\n");
+    }
+}
+
 void test_vpd_page_00(char *dev, char *cmd_str)
 {
     struct scsi_12_01_00 data;
@@ -241,7 +291,8 @@ int main(int argc, char * argv[])
 {
     //send_scsi_command(argv[1], "12,00,00,00,60,00");
     //test_vpd_page_00(argv[1], argv[2]);
-    test_vpd_page_b2(argv[1], argv[2]);
+    //test_vpd_page_b2(argv[1], argv[2]);
+    test_get_identify_device_data(argv[1]);
     return 0;
 }
 #endif
diff --git a/NasLib/hal/hal_lib_sas.h b/NasLib/hal/hal_lib_sas.h
index f55910c55d8..d6b0648beba 100644
--- a/NasLib/hal/hal_lib_sas.h
+++ b/NasLib/hal/hal_lib_sas.h
@@ -3,6 +3,7 @@
 int is_sas_support_trim(char *ctrl_name);
 int is_sas_support_trim_write(char *ctrl_name);
 int is_sas_support_trim_read_zero(char *ctrl_name);
+int get_identify_device_data(char* dev, char *page, unsigned char *buf, int buf_len);
 
 struct scsi_12_01_00
 {
diff --git a/NasLib/hal/hal_sys_pd.c b/NasLib/hal/hal_sys_pd.c
index 466cb789ec5..2c0b24b5271 100755
--- a/NasLib/hal/hal_sys_pd.c
+++ b/NasLib/hal/hal_sys_pd.c
@@ -15516,6 +15516,74 @@ FILE* da_open_with_header(int enc_id, int port_id, char *disk_data_tmpfile)
     return output;
 }
 
+void da_util_gen_sata_template(char *sata_tmpfile, int enc_id, int port_id, PD_INFO *pd_info, struct da_temp_info *datainfo, int *record_count)
+{
+    int ret;
+    int i;
+    int len;
+    int tnums[] = {16, 17, 18, 19, 201, 202, 203};
+    FILE *sata_out_file = NULL;
+    char blob[512] = {0};
+
+    da_iotest(enc_id, port_id);
+    len = sizeof(tnums)/sizeof(int);
+    memset(datainfo, 0, sizeof(struct da_temp_info) * len);
+    sata_out_file = fopen(sata_tmpfile, "w");
+
+    for(i = 0 ; i < len ; i++)
+    {
+        memset(blob, 0x0, sizeof(blob));
+        switch(tnums[i])
+        {
+            case 16:
+                datainfo[i].temp_num = 16;
+                ret = pd_sys_get_disk_statistic_data(16, pd_info->serial_no, blob);
+                break;
+
+            case 17:
+                datainfo[i].temp_num = 17;
+                ret = get_identify_device_data(pd_info->pd_ctrl_name, "02", blob, 512);
+                break;
+
+            case 18:
+                datainfo[i].temp_num = 18;
+                ret = get_identify_device_data(pd_info->pd_ctrl_name, "03", blob, 512);
+                break;
+
+            case 19:
+                datainfo[i].temp_num = 19;
+                ret = get_identify_device_data(pd_info->pd_ctrl_name, "04", blob, 512);
+                break;
+
+            case 201:
+                datainfo[i].temp_num = 201;
+                ret = pd_sys_get_disk_statistic_data(201, pd_info->serial_no, blob);
+                break;
+
+            case 202:
+                datainfo[i].temp_num = 202;
+                ret = pd_sys_get_disk_statistic_data(202, pd_info->serial_no, blob);
+                break;
+
+            case 203:
+                datainfo[i].temp_num = 203;
+                ret = da_util_get_raid_info(enc_id, port_id, blob);
+                break;
+        }
+        if(ret == 0)
+        {
+            datainfo[i].len = 512;
+            da_dump_data_to_file(sata_out_file, datainfo[i], blob);
+            *record_count += 1;
+        }
+        else
+        {
+            ERR_TRACE(TRACE_INFO, "%s : fail to get data of template %d : %d\n", __func__, datainfo[i].temp_num, ret);
+        }
+    }
+    fclose(sata_out_file);
+}
+
 int pd_sys_get_data_package(IN char *enc_sys_id, IN char *pd_sys_id, IN int enc_id, IN int port_id)
 {
     struct ata_smart_attribute *attribute_entry;
@@ -15896,90 +15964,12 @@ int pd_sys_get_data_package(IN char *enc_sys_id, IN char *pd_sys_id, IN int enc_
             }
 
             // New flow start
-            int ret;
             int da_i;
-            int sata_max_template_num = 4;
-            FILE *sata_out_file = NULL;
             char sata_tmpfile[128] = {0};
-            struct da_temp_info datainfo[4];
-            char blob[512] = {0};
-
-            memset(datainfo, 0, sizeof(struct da_temp_info) * sata_max_template_num);
-
+            struct da_temp_info datainfo[7];
             sprintf(sata_tmpfile, "/tmp/sata_info_%d_%d" ,enc_id, port_id);
-            sata_out_file = fopen(sata_tmpfile, "w");
-            
-            for(da_i = 0 ; da_i < sata_max_template_num ; da_i++)
-            {
-                if(da_i == 0)
-                {
-                    memset(blob, 0x0, sizeof(blob));
-                    
-                    ret = pd_sys_get_disk_statistic_data(DISK_DATA_TEMPLATE_SATA_INTERFACE_STATISTICS + 1, pd_info.serial_no, blob);
-                    if(ret == 0)
-                    {
-                        datainfo[da_i].len = 512;
-                        datainfo[da_i].temp_num = 16;
-                        da_dump_data_to_file(sata_out_file, datainfo[da_i], blob);
-                    }
-                    else
-                    {
-                        ERR_TRACE(TRACE_INFO, "%s : fail to get data of template 16 : %d\n", __func__, ret);
-                    }
-                }
-                else if(da_i == 1)
-                {
-                    memset(blob, 0x0, sizeof(blob));
-                    da_iotest(enc_id, port_id);
-                    ret = pd_sys_get_disk_statistic_data(201, pd_info.serial_no, blob);
-                    if(ret == 0)
-                    {
-                        datainfo[da_i].len = 512;
-                        datainfo[da_i].temp_num = 201;
-                        da_dump_data_to_file(sata_out_file, datainfo[da_i], blob);
-                    }
-                    else
-                    {
-                        ERR_TRACE(TRACE_INFO, "%s : fail to get data of template 201 : %d\n", __func__, ret);
-                    }
-                }
-                else if(da_i == 2)
-                {
-                    memset(blob, 0x0, sizeof(blob));
-                    
-                    ret = pd_sys_get_disk_statistic_data(202, pd_info.serial_no, blob);
-                    if(ret == 0)
-                    {
-                        datainfo[da_i].len = 512;
-                        datainfo[da_i].temp_num = 202;
-                        da_dump_data_to_file(sata_out_file, datainfo[da_i], blob);
-                    }
-                    else
-                    {
-                        ERR_TRACE(TRACE_INFO, "%s : fail to get data of template 202 : %d\n", __func__, ret);
-                    }
-                }
-
-                else if(da_i == 3)
-                {
-                    memset(blob, 0x0, sizeof(blob));
-                    if (da_util_get_raid_info(enc_id, port_id, blob) == 0) {
-                        datainfo[da_i].len = 512;
-                        datainfo[da_i].temp_num = 203;
-                        da_dump_data_to_file(sata_out_file, datainfo[da_i], blob);
-                    }
-                }
-            }
-            fclose(sata_out_file);
-
-            for(da_i = 0 ; da_i < sata_max_template_num ; da_i++)
-            {
-                if(datainfo[da_i].len > 0)
-                {
-                    record_count += 1;
-                }
-            }
 
+            da_util_gen_sata_template(sata_tmpfile, enc_id, port_id, &pd_info, datainfo, &record_count);
             // New flow end
 
             fprintf(pOutput_File, "No. of Records: %d\n", record_count);
@@ -16104,7 +16094,7 @@ int pd_sys_get_data_package(IN char *enc_sys_id, IN char *pd_sys_id, IN int enc_
 
             ERR_TRACE(TRACE_INFO, "%s: template_bitmap 0x%x\n", __func__, template_bitmap);
 
-            for(da_i = 0 ; da_i < sata_max_template_num ; da_i++)
+            for(da_i = 0 ; da_i < sizeof(datainfo)/sizeof(struct da_temp_info) ; da_i++)
             {
                 if(datainfo[da_i].len > 0)
                 {
@@ -16112,7 +16102,7 @@ int pd_sys_get_data_package(IN char *enc_sys_id, IN char *pd_sys_id, IN int enc_
                     fprintf(pOutput_File, "Record %d byte index: %d\n", count, disk_data_offset);
                     fprintf(pOutput_File, "Record %d length: %d\n", count, datainfo[da_i].len);
                     fprintf(pOutput_File, "Record %d template: %03d\n", count, datainfo[da_i].temp_num);
-                    disk_data_offset += disk_data_template_default_resp_size;
+                    disk_data_offset += datainfo[da_i].len;
                 }
             }
 
diff --git a/NasUtil/da_util/da_sas.c b/NasUtil/da_util/da_sas.c
index 6eaa63c5466..5c1be4ab170 100644
--- a/NasUtil/da_util/da_sas.c
+++ b/NasUtil/da_util/da_sas.c
@@ -1,4 +1,3 @@
-
 #include "da_util.h"
 #include "da_sas.h"
 
@@ -525,7 +524,7 @@ int send_read_defect_data_12_plist(int sg_fd, unsigned char op, int data_fd)
        return 0; 
     }
     
-    clen = get_read_da_cfg("333_len", 512); // default: 333_len = 512;
+    clen = get_read_da_cfg("333_len", 5120); // default: 333_len = 512;
     llen = dump_defect_data_length(sg_fd, data_fd, op);
     if(llen < 0)
     {
@@ -549,7 +548,7 @@ int send_read_defect_data_12_glist(int sg_fd, unsigned char op, int data_fd)
     unsigned int llen = -1;
     unsigned int clen = 512;
 
-    clen = get_read_da_cfg("332_len", 512); // default: 332_len = 512;
+    clen = get_read_da_cfg("332_len", 5120); // default: 332_len = 512;
     llen = dump_defect_data_length(sg_fd, data_fd, op);
     if(llen < 0)
     {
