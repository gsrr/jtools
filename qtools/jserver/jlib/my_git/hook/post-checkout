#!/usr/bin/python

import os
import my_git
import xml.etree.cElementTree as ET

patchrepo = '/datapool/qtools/jserver/patches/'

def is_branch_name_valid(paras):
    branch_name = my_git.get_branch_name()
    if my_git.is_branch_name_valid(branch_name) == False:
        return -1
    paras['branch_name'] = branch_name
    return 0

def create_patchdir(paras):
    branch_name = my_git.get_branch_name()
    dirname = branch_name.split("-", 1)[1]
    patchdir = "%s/%s"%(patchrepo, dirname)
    if os.path.exists(patchdir) == False:
        os.mkdir(patchdir)
    paras['patchdir'] = patchdir
    return 0

def copy_default_files(paras):
    files = ['README', 'manifest']
    for f in files:
        src = "%s/%s"%(patchrepo, f)
        dst = "%s/%s"%(paras['patchdir'], f)
        if os.path.exists(dst) == False:
            os.system("cp %s %s"%(src, dst))

#  <project path="NasX86" name="NasX86" revision="localmaster-20190812_Ulink_NvmeSelfTestLog_size_error"/>
def update_manifest(paras)
    f = "%s/manifest"%(paras['patchdir'])
    repo_name = os.path.splitext(my_git.get_repo_name())[0]
    tree = ET.ElementTree(file = f)
    root = tree.getroot()
    for c in root:
        if c.attrib['name'] != repo_name:
            continue
        c.attrib["revision"] = my_git.get_branch_name()
    tree.write(manifest)

def update_default_files(paras):
    files = ['README', 'manifest']
    for f in files:
        func = getattr(sys.modules[__name__], "update_" + f)
        if func:
            func(paras)

def main():
    cmds = [
        is_branch_name_valid,
        create_patchdir,
        copy_default_files,
        update_default_files,
    ]
    paras = {}
    for cmd in cmds:
        ret = cmd(paras)
        if ret != 0:
            break
        print ret, cmd
    print (paras)

if __name__ == "__main__":
    main()
    '''
    c = ET.Element("project")
    c.attrib["path"] = os.path.splitext(repo_name)[0]
    c.attrib["name"] = os.path.splitext(repo_name)[0]
    c.attrib["revision"] = branch
    print (c)
    root.append(c)
    '''
